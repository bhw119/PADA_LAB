# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
Helpfulness =~ system1 + system2
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
# 📌 요인 적재량(Factor Loadings)
factor_loadings <- parameterEstimates(fit, standardized = TRUE)
print(factor_loadings)
# 📌 AVE & CR 계산
latent_vars <- c("system1", "system2")
AVE_CR <- data.frame(Variable = latent_vars, AVE = NA, CR = NA)
for (i in 1:length(latent_vars)) {
items <- subset(factor_loadings, lhs == latent_vars[i] & op == "=~" & !is.na(std.all))
if (nrow(items) > 0) {  # 데이터가 있을 때만 계산
loadings <- items$std.all
AVE_CR$AVE[i] <- mean(loadings^2)  # AVE
CR_numerator <- sum(loadings)^2
CR_denominator <- CR_numerator + sum(items$se^2)
AVE_CR$CR[i] <- ifelse(CR_denominator > 0, CR_numerator / CR_denominator, NA)  # 0으로 나누기 방지
} else {
AVE_CR$AVE[i] <- NA
AVE_CR$CR[i] <- NA
}
}
print(AVE_CR)
# 📌 잠재변수 추출
df$Factor1 <- lavPredict(fit)[, "system1"]
df$Factor2 <- lavPredict(fit)[, "system2"]
df$Helpfulness <- round(df$Helpfulness)  # 반올림 후 정수 변환
df$Helpfulness <- as.integer(df$Helpfulness)
# 📌 ZINB 모델 적합
zinb_model <- zeroinfl(Helpfulness ~ Factor1 + Factor2,
data = df,
dist = "negbin",
link = "logit")
# 📌 ZINB 모델 적합도 평가
AIC_value <- AIC(zinb_model)
BIC_value <- BIC(zinb_model)
pseudo_r2 <- pR2(zinb_model)
logLik_value <- logLik(zinb_model)
# 📌 다중공선성 확인 (VIF 대신 상관계수 행렬 확인)
cor_matrix <- cor(df[, c("Factor1", "Factor2")], use = "complete.obs")
print(cor_matrix)
# 📌 VIF 대체 방법 (glm 사용)
glm_model <- glm(Helpfulness ~ Factor1 + Factor2, data = df, family = poisson)
vif_values <- vif(glm_model)
print(vif_values)
# 📌 결과 출력
print(summary(zinb_model))
print(AIC_value)
print(BIC_value)
print(pseudo_r2)
print(logLik_value)
# 📌 SEM 시각화 (구조방정식 다이어그램)
if (lavInspect(fit, "converged")) {
semPaths(fit, "std", layout = "tree", whatLabels = "std", edge.label.cex = 1.2)
} else {
print("모델이 수렴하지 않아서 시각화할 수 없습니다.")
}
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings+Rating
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
# 📌 요인 적재량(Factor Loadings)
factor_loadings <- parameterEstimates(fit, standardized = TRUE)
print(factor_loadings)
# 📌 AVE & CR 계산
latent_vars <- c("system1", "system2")
AVE_CR <- data.frame(Variable = latent_vars, AVE = NA, CR = NA)
for (i in 1:length(latent_vars)) {
items <- subset(factor_loadings, lhs == latent_vars[i] & op == "=~" & !is.na(std.all))
if (nrow(items) > 0) {  # 데이터가 있을 때만 계산
loadings <- items$std.all
AVE_CR$AVE[i] <- mean(loadings^2)  # AVE
CR_numerator <- sum(loadings)^2
CR_denominator <- CR_numerator + sum(items$se^2)
AVE_CR$CR[i] <- ifelse(CR_denominator > 0, CR_numerator / CR_denominator, NA)  # 0으로 나누기 방지
} else {
AVE_CR$AVE[i] <- NA
AVE_CR$CR[i] <- NA
}
}
print(AVE_CR)
# 📌 잠재변수 추출
df$Factor1 <- lavPredict(fit)[, "system1"]
df$Factor2 <- lavPredict(fit)[, "system2"]
df$Helpfulness <- round(df$Helpfulness)  # 반올림 후 정수 변환
df$Helpfulness <- as.integer(df$Helpfulness)
# 📌 ZINB 모델 적합
zinb_model <- zeroinfl(Helpfulness ~ Factor1 + Factor2,
data = df,
dist = "negbin",
link = "logit")
# 📌 ZINB 모델 적합도 평가
AIC_value <- AIC(zinb_model)
BIC_value <- BIC(zinb_model)
pseudo_r2 <- pR2(zinb_model)
logLik_value <- logLik(zinb_model)
# 📌 다중공선성 확인 (VIF 대신 상관계수 행렬 확인)
cor_matrix <- cor(df[, c("Factor1", "Factor2")], use = "complete.obs")
print(cor_matrix)
# 📌 VIF 대체 방법 (glm 사용)
glm_model <- glm(Helpfulness ~ Factor1 + Factor2, data = df, family = poisson)
vif_values <- vif(glm_model)
print(vif_values)
# 📌 결과 출력
print(summary(zinb_model))
print(AIC_value)
print(BIC_value)
print(pseudo_r2)
print(logLik_value)
# 📌 SEM 시각화 (구조방정식 다이어그램)
if (lavInspect(fit, "converged")) {
semPaths(fit, "std", layout = "tree", whatLabels = "std", edge.label.cex = 1.2)
} else {
print("모델이 수렴하지 않아서 시각화할 수 없습니다.")
}
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled_double.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
# 📌 요인 적재량(Factor Loadings)
factor_loadings <- parameterEstimates(fit, standardized = TRUE)
print(factor_loadings)
# 📌 AVE & CR 계산
latent_vars <- c("system1", "system2")
AVE_CR <- data.frame(Variable = latent_vars, AVE = NA, CR = NA)
for (i in 1:length(latent_vars)) {
items <- subset(factor_loadings, lhs == latent_vars[i] & op == "=~" & !is.na(std.all))
if (nrow(items) > 0) {  # 데이터가 있을 때만 계산
loadings <- items$std.all
AVE_CR$AVE[i] <- mean(loadings^2)  # AVE
CR_numerator <- sum(loadings)^2
CR_denominator <- CR_numerator + sum(items$se^2)
AVE_CR$CR[i] <- ifelse(CR_denominator > 0, CR_numerator / CR_denominator, NA)  # 0으로 나누기 방지
} else {
AVE_CR$AVE[i] <- NA
AVE_CR$CR[i] <- NA
}
}
print(AVE_CR)
# 📌 잠재변수 추출
df$Factor1 <- lavPredict(fit)[, "system1"]
df$Factor2 <- lavPredict(fit)[, "system2"]
df$Helpfulness <- round(df$Helpfulness)  # 반올림 후 정수 변환
df$Helpfulness <- as.integer(df$Helpfulness)
# 📌 ZINB 모델 적합
zinb_model <- zeroinfl(Helpfulness ~ Factor1 + Factor2,
data = df,
dist = "negbin",
link = "logit")
# 📌 ZINB 모델 적합도 평가
AIC_value <- AIC(zinb_model)
BIC_value <- BIC(zinb_model)
pseudo_r2 <- pR2(zinb_model)
logLik_value <- logLik(zinb_model)
# 📌 다중공선성 확인 (VIF 대신 상관계수 행렬 확인)
cor_matrix <- cor(df[, c("Factor1", "Factor2")], use = "complete.obs")
print(cor_matrix)
# 📌 VIF 대체 방법 (glm 사용)
glm_model <- glm(Helpfulness ~ Factor1 + Factor2, data = df, family = poisson)
vif_values <- vif(glm_model)
print(vif_values)
# 📌 결과 출력
print(summary(zinb_model))
print(AIC_value)
print(BIC_value)
print(pseudo_r2)
print(logLik_value)
# 📌 SEM 시각화 (구조방정식 다이어그램)
if (lavInspect(fit, "converged")) {
semPaths(fit, "std", layout = "tree", whatLabels = "std", edge.label.cex = 1.2)
} else {
print("모델이 수렴하지 않아서 시각화할 수 없습니다.")
}
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled_double.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
lavInspect(fit, "converged")
factor_loadings <- parameterEstimates(fit, standardized = TRUE)
print(factor_loadings)
# 📌 AVE & CR 계산
latent_vars <- c("system1", "system2")
AVE_CR <- data.frame(Variable = latent_vars, AVE = NA, CR = NA)
for (i in 1:length(latent_vars)) {
items <- subset(factor_loadings, lhs == latent_vars[i] & op == "=~" & !is.na(std.all))
if (nrow(items) > 0) {  # 데이터가 있을 때만 계산
loadings <- items$std.all
AVE_CR$AVE[i] <- mean(loadings^2)  # AVE
CR_numerator <- sum(loadings)^2
CR_denominator <- CR_numerator + sum(items$se^2)
AVE_CR$CR[i] <- ifelse(CR_denominator > 0, CR_numerator / CR_denominator, NA)  # 0으로 나누기 방지
} else {
AVE_CR$AVE[i] <- NA
AVE_CR$CR[i] <- NA
}
}
print(AVE_CR)
# 📌 잠재변수 추출
df$Factor1 <- lavPredict(fit)[, "system1"]
df$Factor2 <- lavPredict(fit)[, "system2"]
df$Helpfulness <- round(df$Helpfulness)  # 반올림 후 정수 변환
df$Helpfulness <- as.integer(df$Helpfulness)
# 📌 ZINB 모델 적합
zinb_model <- zeroinfl(Helpfulness ~ Factor1 + Factor2,
data = df,
dist = "negbin",
link = "logit")
# 📌 ZINB 모델 적합도 평가
AIC_value <- AIC(zinb_model)
BIC_value <- BIC(zinb_model)
pseudo_r2 <- pR2(zinb_model)
logLik_value <- logLik(zinb_model)
# 📌 다중공선성 확인 (VIF 대신 상관계수 행렬 확인)
cor_matrix <- cor(df[, c("Factor1", "Factor2")], use = "complete.obs")
print(cor_matrix)
# 📌 VIF 대체 방법 (glm 사용)
glm_model <- glm(Helpfulness ~ Factor1 + Factor2, data = df, family = poisson)
vif_values <- vif(glm_model)
print(vif_values)
# 📌 결과 출력
print(summary(zinb_model))
print(AIC_value)
print(BIC_value)
print(pseudo_r2)
print(logLik_value)
# 📌 SEM 시각화 (구조방정식 다이어그램)
if (lavInspect(fit, "converged")) {
semPaths(fit, "std", layout = "tree", whatLabels = "std", edge.label.cex = 1.2)
} else {
print("모델이 수렴하지 않아서 시각화할 수 없습니다.")
}
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled_double.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
apply(df[, c("Is_Photo", "Title_Length", "Text_Length", "Time_Lapsed", "Deviation_Of_Star_Ratings")], 2, var)
apply(df[, c("FOG_Index", "Flesch_Reading_Ease", "Depth", "Breadth", "Valence", "Arousal", "Interaction")], 2, var)
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
factor_loadings <- parameterEstimates(fit, standardized = TRUE)
print(factor_loadings)
# 📌 AVE & CR 계산
latent_vars <- c("system1", "system2")
AVE_CR <- data.frame(Variable = latent_vars, AVE = NA, CR = NA)
for (i in 1:length(latent_vars)) {
items <- subset(factor_loadings, lhs == latent_vars[i] & op == "=~" & !is.na(std.all))
if (nrow(items) > 0) {  # 데이터가 있을 때만 계산
loadings <- items$std.all
AVE_CR$AVE[i] <- mean(loadings^2)  # AVE
CR_numerator <- sum(loadings)^2
CR_denominator <- CR_numerator + sum(items$se^2)
AVE_CR$CR[i] <- ifelse(CR_denominator > 0, CR_numerator / CR_denominator, NA)  # 0으로 나누기 방지
} else {
AVE_CR$AVE[i] <- NA
AVE_CR$CR[i] <- NA
}
}
print(AVE_CR)
# 📌 잠재변수 추출
df$Factor1 <- lavPredict(fit)[, "system1"]
df$Factor2 <- lavPredict(fit)[, "system2"]
df$Helpfulness <- round(df$Helpfulness)  # 반올림 후 정수 변환
df$Helpfulness <- as.integer(df$Helpfulness)
# 📌 ZINB 모델 적합
zinb_model <- zeroinfl(Helpfulness ~ Factor1 + Factor2,
data = df,
dist = "negbin",
link = "logit")
# 📌 ZINB 모델 적합도 평가
AIC_value <- AIC(zinb_model)
BIC_value <- BIC(zinb_model)
pseudo_r2 <- pR2(zinb_model)
logLik_value <- logLik(zinb_model)
# 📌 다중공선성 확인 (VIF 대신 상관계수 행렬 확인)
cor_matrix <- cor(df[, c("Factor1", "Factor2")], use = "complete.obs")
print(cor_matrix)
# 📌 VIF 대체 방법 (glm 사용)
glm_model <- glm(Helpfulness ~ Factor1 + Factor2, data = df, family = poisson)
vif_values <- vif(glm_model)
print(vif_values)
# 📌 결과 출력
print(summary(zinb_model))
print(AIC_value)
print(BIC_value)
print(pseudo_r2)
print(logLik_value)
# 📌 SEM 시각화 (구조방정식 다이어그램)
if (lavInspect(fit, "converged")) {
semPaths(fit, "std", layout = "tree", whatLabels = "std", edge.label.cex = 1.2)
} else {
print("모델이 수렴하지 않아서 시각화할 수 없습니다.")
}
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled_double.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
# 📌 AVE & CR 계산
latent_vars <- c("system1", "system2")
AVE_CR <- data.frame(Variable = latent_vars, AVE = NA, CR = NA)
for (i in 1:length(latent_vars)) {
items <- subset(factor_loadings, lhs == latent_vars[i] & op == "=~" & !is.na(std.all))
if (nrow(items) > 0) {  # 데이터가 있을 때만 계산
loadings <- items$std.all
AVE_CR$AVE[i] <- mean(loadings^2)  # AVE
CR_numerator <- sum(loadings)^2
CR_denominator <- CR_numerator + sum(items$se^2)
AVE_CR$CR[i] <- ifelse(CR_denominator > 0, CR_numerator / CR_denominator, NA)  # 0으로 나누기 방지
} else {
AVE_CR$AVE[i] <- NA
AVE_CR$CR[i] <- NA
}
}
print(items)
factor_loadings <- parameterEstimates(fit, standardized = TRUE)
print(factor_loadings)
print(AVE_CR)
# 📌 잠재변수 추출
df$Factor1 <- lavPredict(fit)[, "system1"]
df$Factor2 <- lavPredict(fit)[, "system2"]
df$Helpfulness <- round(df$Helpfulness)  # 반올림 후 정수 변환
df$Helpfulness <- as.integer(df$Helpfulness)
# 📌 ZINB 모델 적합
zinb_model <- zeroinfl(Helpfulness ~ Factor1 + Factor2,
data = df,
dist = "negbin",
link = "logit")
# 📌 ZINB 모델 적합도 평가
AIC_value <- AIC(zinb_model)
BIC_value <- BIC(zinb_model)
pseudo_r2 <- pR2(zinb_model)
logLik_value <- logLik(zinb_model)
# 📌 다중공선성 확인 (VIF 대신 상관계수 행렬 확인)
cor_matrix <- cor(df[, c("Factor1", "Factor2")], use = "complete.obs")
print(cor_matrix)
# 📌 VIF 대체 방법 (glm 사용)
glm_model <- glm(Helpfulness ~ Factor1 + Factor2, data = df, family = poisson)
vif_values <- vif(glm_model)
print(vif_values)
# 📌 결과 출력
print(summary(zinb_model))
print(AIC_value)
print(BIC_value)
print(pseudo_r2)
print(logLik_value)
# 📌 SEM 시각화 (구조방정식 다이어그램)
if (lavInspect(fit, "converged")) {
semPaths(fit, "std", layout = "tree", whatLabels = "std", edge.label.cex = 1.2)
} else {
print("모델이 수렴하지 않아서 시각화할 수 없습니다.")
}
library(lavaan)
library(pscl)
library(semPlot)
library(car)  # VIF 계산을 위해 추가
# 데이터 불러오기
df <- read.csv("C:/Users/Administrator/Desktop/PADA_LAB/구조방정식/Count_SEM/scaled_data/amazon_scaled_double.csv")
# SEM 모델 정의
model <- '
system1 =~ Is_Photo + Title_Length + Text_Length + Time_Lapsed+ Deviation_Of_Star_Ratings
system2 =~ FOG_Index + Flesch_Reading_Ease + Depth + Breadth + Valence + Arousal + Interaction
'
# SEM 모델 적합
fit <- sem(model, data = df, estimator = "MLR")
# 📌 SEM 적합도 지표 확인
if (lavInspect(fit, "converged")) {
fit_measures <- fitMeasures(fit, c("cfi", "tli", "rmsea", "srmr"))
print(fit_measures)
} else {
stop("모델이 수렴하지 않았습니다. 수렴 문제를 해결해야 합니다.")
}
# 📌 AVE & CR 계산
latent_vars <- c("system1", "system2")
AVE_CR <- data.frame(Variable = latent_vars, AVE = NA, CR = NA)
for (i in 1:length(latent_vars)) {
items <- subset(factor_loadings, lhs == latent_vars[i] & op == "=~" & !is.na(std.all))
print(item)
if (nrow(items) > 0) {  # 데이터가 있을 때만 계산
loadings <- items$std.all
AVE_CR$AVE[i] <- mean(loadings^2)  # AVE
CR_numerator <- sum(loadings)^2
CR_denominator <- CR_numerator + sum(items$se^2)
AVE_CR$CR[i] <- ifelse(CR_denominator > 0, CR_numerator / CR_denominator, NA)  # 0으로 나누기 방지
} else {
AVE_CR$AVE[i] <- NA
AVE_CR$CR[i] <- NA
}
}
